(define-grammar g10
  (E T P)
  (+ - * / l r n)
  E
  (((E T))
   ((E T + E) (+ $1 $3))
   ((E T - E) (- $1 $3))
   ((T P))
   ((T P * T) (* $1 $3))
   ((T P / T) (/ $1 $3))
   ((P n))
   ((P l E r) $2))
  (if (eq? terminal 'n)
      42
      #f))

(define i10-1 (list (cons (enum g10-symbol l) #f)
		    (cons (enum g10-symbol n) 4)
		    (cons (enum g10-symbol +) #f)
		    (cons (enum g10-symbol n) 17)
		    (cons (enum g10-symbol r) #f)
		    (cons (enum g10-symbol *) #f)
		    (cons (enum g10-symbol n) 7)))

(define i10-2 (list (cons (enum g10-symbol l) #f)
		    (cons (enum g10-symbol n) 4)
		    (cons (enum g10-symbol +) #f)
		    (cons (enum g10-symbol n) 15)
		    (cons (enum g10-symbol n) 17)
		    (cons (enum g10-symbol r) #f)
		    (cons (enum g10-symbol *) #f)
		    (cons (enum g10-symbol n) 7)))

(define i10-3 (list (cons (enum g10-symbol l) #f)
		    (cons (enum g10-symbol n) 4)
		    (cons (enum g10-symbol +) #f)
		    (cons (enum g10-symbol n) 17)
		    (cons (enum g10-symbol *) #f)
		    (cons (enum g10-symbol n) 7)))
