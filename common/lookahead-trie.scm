(define-without-memoization
  (select-lookahead-item item-set k input cont fail)
  (let loop ((trie (items->trie item-set k)) (input input) (pos 0))
    (if (null? trie)
        (fail)
        (if (= pos k)
            (cont trie)
            (let* ((ch (stream-car input)))
              (let inner-loop ((trie trie))
                (if (null? trie)
                    (fail)
		    (let la-loop ((la-set (caar trie)))
		      (cond ((equal? ch (car la-set))
			     (loop (cdar trie) (stream-cdr input) (+ pos 1)))
			    ((null? (cdr la-set))
			     (inner-loop (cdr trie)))
			    ((la-loop (cdr la-set))
			     (loop (cdar trie) (stream-cdr input) (+ pos 1))))))))))))
