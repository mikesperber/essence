(define (in-take n s)
  (if (zero? n)
      '()
      (cons (car (stream-car s)) (in-take (- n 1) (stream-cdr s)))))

(define-without-memoization
  (select-lookahead-item item-set k input cont fail)
  (let ((input-front (in-take k input)))
    (let loop ((item-set item-set))
      (if (null? item-set)
	  (fail)
	  (let ((item (car item-set)))
	    (if (equal? input-front (item-lookahead item))
		(cont item)
		(loop (cdr item-set))))))))
